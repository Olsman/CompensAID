% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UpdateSSI.R
\name{UpdateSSI}
\alias{UpdateSSI}
\title{Update Secondary Stain Index}
\usage{
UpdateSSI(si.input, rv.input, primary, secondary, population)
}
\arguments{
\item{si.input}{(dataFrame): DataFrame containing the SSI info.}

\item{rv.input}{(numerical): Numerical value for the number of segments.}

\item{primary}{(character): Name of the primary marker}

\item{secondary}{(character): Name of the secondary marker}

\item{population}{(list): List with the population matrices}
}
\value{
(numerical) Returns the Secondary Stain Index score.
}
\description{
Update Secondary Stain Index
}
\examples{
# Import FCS file
file <- flowCore::read.FCS(system.file("extdata", "250410.fcs", package = "compensAID"))

# Parameter for the number of segments
range.value <- 4

# Density-based cut-off detection
center.plot <- 2
co <- DensityGating(og = file,
                    cp.value = center.plot)

# All possible marker combinations
mc <- GetMarkerCombinations(og = file)

# Parameter for the distance between the primary positive and negative population
separation.distance <- 0.25

# Obtain SSI info dataFrame
si <- EmptyMatrixInfo(og = file,
                      rv.input = range.value,
                      mc.input = mc,
                      co.input = co,
                      sd.input = separation.distance)

# Channel names
primary.marker <- "CD19"
secondary.marker <- "IgL"

# Get populations
pop <- GetPopulations(og = file,
                      primary = primary.marker,
                      secondary = secondary.marker,
                      co.input = co,
                      sd.input = separation.distance)

#' # Channel names
cp <- "PE-Cy7-A"
cs <- "APC-H7-A"

# Update matrix information
range <- (max(pop$primary.positive[, cp]) - min(pop$primary.positive[, cp]))/range.value
si <- UpdateMatrixInfo(si.input = si,
                       rv.input = range.value,
                       range.input = range,
                       primary = primary.marker,
                       secondary = secondary.marker,
                       output = "PASS",
                       population = pop)

# Calculate SSI for the last segment
si <- UpdateSSI(si.input = si,
                rv.input = range.value,
                primary = primary.marker,
                secondary = secondary.marker,
                population = pop)

}
\seealso{
\code{\link{CompensAID}}, \code{\link{EmptyMatrixInfo}}, \code{\link{DensityGating}}
}
